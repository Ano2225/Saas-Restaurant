// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id                String    @id @default(cuid())
  name              String    @unique
  enterprise_name   String    @unique
  email             String    @unique
  password          String
  telephone         String    @unique
  user_Role         String    @default("RESTAURANT_OWNER")
  emailVerified     DateTime?
  verificationToken String?   @unique
  trialEndsAt       DateTime
  isTrialExpired    Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  stockMovements StockMovement[]
  sales         Sale[]

  @@index([email])
  @@index([enterprise_name])
  @@index([name])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  image     String    
  parent    Category? @relation("SubCategories", fields: [parentId], references: [id])
  parentId  Int?
  children  Category[] @relation("SubCategories")
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  sku         String    @unique
  price       Float
  cost        Float
  stock       Int       @default(0)
  minStock    Int       @default(5)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  movements   StockMovement[]
  saleItems   SaleItem[]

}

model StockMovement {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  type      String   // "IN" or "OUT"
  reason    String   // "PURCHASE", "SALE", "ADJUSTMENT", etc.
  date      DateTime @default(now())
  createdBy String   // User ID who created the movement
  user      User     @relation(fields: [createdBy], references: [id])

}

model Sale {
  id          Int       @id @default(autoincrement())
  number      String    @unique // Num√©ro de facture
  date        DateTime  @default(now())
  status      String    // "PENDING", "COMPLETED", "CANCELLED"
  total       Float
  items       SaleItem[]
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float    // Prix au moment de la vente
  total     Float    // Prix total de la ligne
}

